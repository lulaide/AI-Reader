apiVersion: v1
kind: Namespace
metadata:
  name: ai-reader
---
apiVersion: v1
kind: Secret
metadata:
  name: app-secret
  namespace: ai-reader
type: Opaque
stringData:
  # OpenAI
  OPENAI_API_BASE: a
  OPENAI_API_KEY: a

  MYSQL_ROOT_PASSWORD: "123456"
  MYSQL_USER: "appuser"
  MYSQL_PASSWORD: "StrongPass!2025"
  MYSQL_DATABASE: "ai_reader"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
  namespace: ai-reader
spec:
  accessModes: [ ReadWriteOnce ]
  resources:
    requests:
      storage: 1Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql-deployment
  namespace: ai-reader
spec:
  replicas: 1
  selector:
    matchLabels: { app: mysql }
  template:
    metadata:
      labels: { app: mysql }
    spec:
      containers:
        - name: mysql
          image: harbor.lulaide.com:80/ai-reader/mariadb:10.11
          ports:
            - containerPort: 3306
          envFrom:
            - secretRef:
                name: app-secret
          volumeMounts:
            - name: mysql-persistent-storage
              mountPath: /var/lib/mysql
          resources:
            requests: { cpu: "100m", memory: "256Mi" }
            limits:   { cpu: "500m", memory: "512Mi" }
          readinessProbe:
            exec:
              command: ["sh","-c","mariadb-admin ping -h 127.0.0.1 --silent"]
            initialDelaySeconds: 5
            periodSeconds: 3
            timeoutSeconds: 2
      volumes:
        - name: mysql-persistent-storage
          persistentVolumeClaim:
            claimName: mysql-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: mysql-service
  namespace: ai-reader
spec:
  type: ClusterIP
  selector: { app: mysql }
  ports:
    - protocol: TCP
      port: 3306
      targetPort: 3306
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-deployment
  namespace: ai-reader
spec:
  replicas: 1
  selector:
    matchLabels: { app: backend }
  template:
    metadata:
      labels: { app: backend }
    spec:
      initContainers:
        - name: wait-mysql
          image: harbor.lulaide.com:80/ai-reader/mariadb:10.11
          command: ["sh","-c"]
          args:
            - |
              echo "Waiting for mysql-service:3306...";
              until mariadb-admin ping -h mysql-service --silent; do sleep 2; done
      containers:
        - name: backend
          image: harbor.lulaide.com:80/ai-reader/ai-reader-backend:latest
          ports:
            - containerPort: 4000
          env:
            - name: MYSQL_HOST
              value: "mysql-service"
            - name: MYSQL_USER
              valueFrom: { secretKeyRef: { name: app-secret, key: MYSQL_USER } }
            - name: MYSQL_PASSWORD
              valueFrom: { secretKeyRef: { name: app-secret, key: MYSQL_PASSWORD } }   # 关键修改
            - name: MYSQL_DATABASE
              valueFrom: { secretKeyRef: { name: app-secret, key: MYSQL_DATABASE } }
            - name: OPENAI_API_KEY
              valueFrom: { secretKeyRef: { name: app-secret, key: OPENAI_API_KEY } }
            - name: OPENAI_API_BASE
              valueFrom: { secretKeyRef: { name: app-secret, key: OPENAI_API_BASE } }
          resources:
            requests: { cpu: "50m",  memory: "128Mi" }
            limits:   { cpu: "200m", memory: "256Mi" }
---
apiVersion: v1
kind: Service
metadata:
  name: backend-service
  namespace: ai-reader
spec:
  type: ClusterIP
  selector: { app: backend }
  ports:
    - protocol: TCP
      port: 4000
      targetPort: 4000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend-deployment
  namespace: ai-reader
spec:
  replicas: 1
  selector:
    matchLabels: { app: frontend }
  template:
    metadata:
      labels: { app: frontend }
    spec:
      containers:
        - name: frontend
          image: harbor.lulaide.com:80/ai-reader/ai-reader-frontend:latest
          ports:
            - containerPort: 80
          resources:
            requests: { cpu: "25m", memory: "64Mi" }
            limits:   { cpu: "100m", memory: "128Mi" }
---
apiVersion: v1
kind: Service
metadata:
  name: frontend-service
  namespace: ai-reader
spec:
  type: NodePort
  selector: { app: frontend }
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
      nodePort: 30080